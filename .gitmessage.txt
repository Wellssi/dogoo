################
# 참고: Conventional Commits (https://www.conventionalcommits.org/ko/v1.0.0/)
################
# 💡 제목(필수) | <타입>[적용 범위(선택 사항)][!(선택사항)]: <설명>

# ❗️ 바로 아래 공백은 수정하지 말 것. 제목과 본문을 구분하기 위해 존재합니다.

# 💡 본문(선택사항) | - <내용>

# ❗️ 바로 아래 공백은 수정하지 말 것. 본문과 꼬릿말을 구분하기 위해 존재합니다.

# 💡 꼬리말(선택사항) | <내용>

################
# 💡 제목
#   - 형식 : <타입>(적용 범위(선택 사항)): <설명>
#   - 작업 내용을 명확하게 기록합니다.
#   - 타입 뒤에 ':'이 위치 해야하며, ':' 뒤엔 반드시 공백이 존재 해야합니다.
#   - 예)
#       feat: 기능1 추가
#
# 💡 본문(Body, 선택 사항)
#   - 구체적인 내용을 작성하는 영역으로, 선택사항 입니다.
#   - '-'를 사용해 내용을 구분합니다.
#
# 💡 꼬릿말(footer, 선택사항)
#   - 추가적인 정보를 기입하는 영역으로, 선택사항 입니다.
#   - Reviewer, Issue ID 등을 기입할 수 있습니다.
#   - 예)
#       Reviewed-by: member1
#       Refs: #123
#
# 📌 타입
#   - fix: 버그 수정
#   - feat: 새 기능 추가
#   - docs: 문서 수정
#   - perf: 퍼포먼스 향상
#   - refactor: 코드 리팩터링 진행 시
#   - revert: 이전 커밋으로 revert
#   - test: 테스트 코드에 대한 변경
#   - style: 코드 의미에 영향을 주지 않는 변경사항
#   - chore: 빌드 부분 혹은 패키지 매니저 수정사항
# 
# 📌 BREAKING CHANGE 작성 방법
#   1. 타입 뒤에 '!'을 붙여 작성한다.
#   2. 꼬리말에 `BREAKING CHANGE: <설명>` 을 작성한다.
################